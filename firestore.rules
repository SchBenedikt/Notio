
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    match /schools/{schoolId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
    }
    
    match /profiles/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']));
    }

    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      allow update: if (isOwner(resource.data.authorId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content'])) ||
                     (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));

      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isOwner(request.resource.data.authorId); 
        allow delete: if isOwner(resource.data.authorId);
        allow update: if isOwner(resource.data.authorId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content']);
      }
    }
    
    match /posts/{postId} {
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']);
    }
  }
}
