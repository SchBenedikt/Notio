rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // PROFILE DATA: Users can read anyone's profile, but only write to their own.
    match /profiles/{userId} {
      allow read: if isSignedIn();
      allow write: if request.auth.uid == userId;
    }

    // USER DATA (subjects, grades, settings, files, etc.):
    // Users can only access documents under their own user ID.
    match /users/{userId}/{documents=**} {
      allow read, write, delete: if request.auth.uid == userId;
    }
    
    // POSTS: Authenticated users can read/create posts.
    // Only the author can update or delete their own post.
    match /posts/{postId} {
      allow read, create: if isSignedIn();
      allow update, delete: if request.auth.uid == resource.data.authorId;
      
      // COMMENTS: Authenticated users can read/create comments.
      // Only the author can update or delete their own comment.
      match /comments/{commentId} {
        allow read, create: if isSignedIn();
        allow update, delete: if request.auth.uid == resource.data.authorId;
      }
    }

    // SCHOOL DATA:
    // Any authenticated user can read the list of schools or add a new one.
    // No one can modify or delete a school entry to prevent vandalism.
    match /schools/{schoolId} {
      allow read, create: if isSignedIn();
      allow update, delete: if false; // Protect school entries from modification
    }

    // SCHOOL EVENTS:
    // Users must belong to a school to see its events.
    // Users can only create, update, or delete events for their own school.
    match /schools/{schoolId}/events/{eventId} {
       allow read, create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)/settings/main).data.schoolId == schoolId;
       // Only the original author can update or delete their event.
       allow update, delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }
  }
}
